@node Unsafe procedures
@section Unsafe procedures

The @code{(loko system unsafe)} library provides raw access to kernel
services, linear memory and I/O bus registers.

@deffn Procedure syscall n arg ...
Calls the kernel's system call number @var{n} with the arguments
@var{arg ...}. Returns a fixnum.

Example fork on Linux amd64:

@example
(when (zero? (syscall 57))     ; __NR_fork
  (display "child process\n")
  (exit))                      ; child become a zombie
@end example

Scheme programs should generally not be written with syscalls directly
any less than C programs would do the same. There are usually
interactions with the standard library that should be considered, such
as flushing of ports to prevent duplicated output.
@end deffn

@deffn Procedure bytevector-address bytevector
Get the linear address of the first byte of @var{bytevector}.

The first byte is guaranteed to have an alignment of eight bytes.

A moving garbage collector is used for normally allocated bytevectors
(created with @code{make-bytevector}). There is no way to ensure that
they do not move during GC, so their addresses should not be used to
perform bus-mastering DMA.

Returns a fixnum.
@end deffn

@deffn Procedure get-mem-u8 addr
@deffnx Procedure get-mem-u16 addr
@deffnx Procedure get-mem-u32 addr

Read a u8, u16 or u32, respectively, from linear address @var{addr}
and return it as a fixnum. If @var{addr} is unaligned then an
exception is raised.

The @code{get-mem-u32} procedure may return a bignum on targets where
@code{(<= (fixnum-width) 32)}, but the bus access will be 32 bits
wide.
@end deffn

@deffn Procedure get-mem-s61 addr
Read and return a fixnum from linear address @var{addr}. If @var{addr}
is not evenly divisible by 8 then an exception is raised.

This procedure is only available on targets where
@code{(>= (fixnum-width) 61)}.
@end deffn

@deffn Procedure put-mem-u8 addr n
@deffnx Procedure put-mem-u16 addr n
@deffnx Procedure put-mem-u32 addr n
Write @var{n} as a u8, u16 or u32, respectively, to linear address
@var{addr}. If @var{addr} is unaligned then an exception is raised.

Returns unspecified values.
@end deffn

@deffn Procedure put-mem-s61 addr n
Write the fixnum @var{n} to linear address @var{addr}. If @var{addr}
is not evenly divisible by 8 then an exception is raised.

Returns unspecified values.

This procedure is only available on targets where
@code{(>= (fixnum-width) 61)}.
@end deffn

@deffn Procedure get-i/o-u8 busaddr
@deffnx Procedure get-i/o-u16 busaddr
@deffnx Procedure get-i/o-u32 busaddr
Read a u8, u16 or u32, respectively, from I/O bus address
@var{busaddr} and return it as a fixnum.

The @code{get-i/o-u32} procedure may return a bignum on targets where
@code{(<= (fixnum-width) 32)}, but the bus access will be 32 bits
wide.
@end deffn

@deffn Procedure put-i/o-u8 busaddr n
@deffnx Procedure put-i/o-u16 busaddr n
@deffnx Procedure put-i/o-u32 busaddr n
Write @var{n} as a u8, u16 or u32, respectively, to I/O bus address
@var{busaddr}.

Returns unspecified values.
@end deffn

@deffn Procedure get-i/o-u8-n! busaddr addr n
@deffnx Procedure get-i/o-u16-n! busaddr addr n
@deffnx Procedure get-i/o-u32-n! busaddr addr n

Read @var{n} units of u8, u16 or u32, respectively, from I/O bus
address @var{busaddr} and write them to memory starting at linear
address @var{addr}.

Returns unspecified values.
@end deffn

@c Local Variables:
@c TeX-master: "loko.texi"
@c End:
