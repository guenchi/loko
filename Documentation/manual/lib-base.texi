@node Base library
@section Base library

The @code{(loko)} library is automatically loaded into the repl. It
provides all exports from the R6RS libraries, SRFI 98, and the exports
shown below here. It is intended as a convenient starting point for
the repl user and a place to put features that are expected from a
Scheme implementation, but which have for some reason or other not
been standardized.

@deffn Procedure interaction-environment
@end deffn

@deffn Procedure load filename
@end deffn

@deffn Procedure void
@end deffn

@defvr Parameter library-directories
This parameter is a list of strings that name directories to check
when importing libraries.

Default: @code{(".")}
@end defvr

@defvr Parameter library-extensions
This parameter is a list of strings with file extensions to use when
importing libraries.

Default: @code{(".loko.sls" ".sls" ".ss" ".scm")}
@end defvr

@deffn Procedure installed-libraries
For use in the repl. Returns a list of libraries.
@end deffn

@deffn Procedure uninstall-library name
For use in the repl. Uninstalls the @var{name} library.
@end deffn

@deffn Procedure expand expr
Expands the expression, returning core forms. The format of the
returned forms should not be relied on.
@end deffn

@deffn Procedure expand/optimize expr
Expands and optimizes the expression, returning core forms. The
format of the returned forms should not be relied on.
@end deffn

@defvr Parameter cp0-size-limit
@end defvr

@defvr Parameter cp0-effort-limit
@end defvr

@deffn Procedure disassemble procedure
Print the disassembly of @var{procedure}.

@example
> (disassemble car)
Disassembly for #<procedure car loko/libs/pairs.loko.sls:3224>

  entry:
   206E00 83F8F8       (cmp eax #xFFFFFFF8)
   206E03 0F8505000000 (jnz L0)
 ; (set! rax (car rdi))
   206E09 488B47FE     (mov rax (mem64+ rdi #x-2))
   206E0D C3           (ret)
  L0:
   206E0E E96DA2FFFF   (jmp (+ rip #x-5D93))
@end example
@end deffn

@deffn Procedure machine-type
The machine type that Loko is running on. This is a vector where the
first element is the CPU type @code{amd64} and the second is the system
environment (@code{linux} or @code{pc}).
@end deffn

@deffn Syntax time expr
Run the procedure @var{thunk} once with no arguments and print some
numbers of memory allocation and elapsed time.
@end deffn

@deffn Procedure time-it what thunk
This is the procedural version of @code{time}.
@end deffn

@deffn Procedure time-it* what iterations thunk
Run @var{thunk} repeatedly @var{iterations} times and print some bogus
statistics. The aim is that this procedure should be the best way to
do micro benchmarks.

@example
> (time-it* "fx+" 10000000 (lambda () (fx+ x 1)))
Timing fx+ to find the minimum cycle time:
New minimum is 1819 cycles with 10000000 iterations to go.
...
New minimum is 234 cycles with 6257346 iterations to go.

  The cycle count varied between 234 and 83160784
  (Arithmetic mean)      µ  = 248.75
  (Standard deviation)   σ  = 24.33
  (Population variance)  σ² = 592.08
                    min x_i = µ-.61σ
  Used 9736890 samples (263110 outliers discarded).
234
> (time-it* "+" 10000000 (lambda () (+ x 1)))
Timing + to find the minimum cycle time:
New minimum is 1751 cycles with 10000000 iterations to go.
...
New minimum is 240 cycles with 9968540 iterations to go.

  The cycle count varied between 240 and 84141254
  (Arithmetic mean)      µ  = 252.96
  (Standard deviation)   σ  = 30.46
  (Population variance)  σ² = 927.82
                    min x_i = µ-.43σ
  Used 9979862 samples (20138 outliers discarded).
240
@end example

Note that cp0 will optimize the thunk before it runs, so you may end
up benchmarking something other than what you thought. Check with
@code{expand/optimize}. If the code is entered in the REPL then you
also measure the overhead of @code{eval}.

Modern computers are notoriously difficult to get any consistent
results from. An improvement in cycles could be because the code
slightly moved in memory. See
@url{https://john.cs.olemiss.edu/~hcc/researchMethods/notes/localcopy/mytkowicz-wrong-data.pdf,
Producing Wrong Data Without Doing Anything Obviously Wrong} (2009,
Mytkowicz, et al). A more lively view of the problem is the
presentation @url{https://youtu.be/r-TLSBdHe1A, Performance Matters}
(2019, Emery Berger at Strange Loop).
@end deffn

@deffn Procedure open-output-string
Make a new string output port that accumulates characters in memory.
The accumulated string can be extracted with @code{get-output-string}.
@end deffn

@deffn Procedure get-output-string string-output-port
Extract the accumulated string in @code{string-output-port} and reset
it. Returns the string.
@end deffn

@deffn Procedure port-file-descriptor port
Get the file descriptor associated with @var{port}. Returns @code{#f}
if there is no associated file descriptor.
@end deffn

@deffn Procedure port-file-descriptor-set! port fd
Set the file descriptor associated with @var{port} to @var{fd}.

This procedure is primarily intended to allow custom ports to have
file descriptors. It is unspecified whether changing a port's file
descriptor affects the file descriptor used for subsequent operations
on the port.
@end deffn

@deffn Procedure gensym
Generate an uninterned symbol. These are symbols which are not
@code{eq?} to any other symbol.
@end deffn

@deffn Procedure make-parameter default-value [fender]
Create a new parameter object. Parameters are typically used to
implement dynamically scoped variables together with
@code{parameterize}. A parameter's current value can be queried by
calling it with no arguments and its value can be modified by calling
it with one argument, the new value.

The optional @var{fender} procedure is applied to the value whenever
the parameter is modified. The return value of @var{fender} is used in
place of the new value. A typical use of this procedure is to do some
type checks on the new value.
@end deffn

@deffn Syntax parameterize ((name value) ...) body ...
Parameterize rebinds the parameter @var{name} to @var{value} for the
dynamic extent of @var{body}. This means that while @var{body} is
running, @var{name} will be set to @var{value}. The value is possibly
filtered by a fender procedure.

Whenever the program leaves the body, either by a normal return or a
non-local exit (such as in a @code{guard} expression or by calling a
continuation created by @code{call/cc}), the value is reset to the
value it has outside of the body. If control reenters body, as in a
call to a continuation created inside the body, the parameter will
return to the value established by @code{parameterize}.

Although it has the same name, this syntax is a faster variant that is
not fully compatible with SRFI-39. This variant is very common in
Scheme implementations and matches the one used in e.g. Chez Scheme.
@end deffn

@c Local Variables:
@c TeX-master: "loko.texi"
@c End:
