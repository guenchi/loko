@node Fibers
@section Fibers

The @code{(loko system fibers)} library exports procedures for fibers.
Fibers are a form of lightweight concurrency based on Concurrent ML.
For an overview, @pxref{Concurrency}.

@deffn Procedure spawn-fiber thunk
Create a new fiber that will start running the procedure @var{thunk},
which takes no arguments.
@end deffn

@deffn Procedure make-channel
Create a new channel. Channels are places where two fibers can
rendezvous to exchange a message. There is no buffering in a channel.
@end deffn

@deffn Procedure channel? obj
True if @var{obj} is a channel.
@end deffn

@deffn Procedure put-message channel obj
Put the message @var{obj} on the channel @var{channel}. Blocks until
another fiber picks up the message. Returns unspecified values.
@end deffn

@deffn Procedure get-message channel
Get a message from the channel @var{channel}. Blocks until another fiber
has arrived with a message. Returns the message.
@end deffn

@deffn Procedure sleep time
Block the fiber for @var{time} seconds.
@end deffn

@deffn Procedure put-operation channel obj
Returns an operation object that represents putting the message
@var{obj} on the channel @var{channel}.
@end deffn

@deffn Procedure get-operation channel
Returns an operation object that represents getting a message from the
channel @var{channel}.
@end deffn

@deffn Procedure wrap-operation op f
Returns an operation object that is the same as the operation
@var{op}, except that the values a wrapped by the procedure @var{f}.
@end deffn

@deffn Procedure sleep-operation seconds
Returns an operation object that represents waiting until
@var{seconds} have passed from the time of the call to this procedure.
@end deffn

@deffn Procedure timer-operation a
Return an operation object that represents waiting until absolute time
@var{a} (in internal time units).
@end deffn

@deffn Procedure choice-operation op ...
Returns an operation object that represents a choice between the given
operations @var{op ...}. If multiple operations can be performed then
one is selected non-deterministically.

It is not an error to call this procedure with no arguments. It is in
fact a useful construction when gathering operations.

If @code{wrap-operation} is used on a choice operation then every
operation will be wrapped.
@end deffn

@deffn Procedure perform-operation op
Perform the operation @var{op}, possibly blocking the fiber until the
operation is ready.

With @code{choice-operation} and @code{perform-operation} it's
possible to write code that waits for one of several operations. This
can be something simple like waiting for a message with a timeout:

@example
(perform-operation (get-operation ch) (sleep-operation 1))
@end example

This example will wait for a message on the channel @var{ch} for up to
one second. In order to distinguish between a message and a timeout,
@code{wrap-operation} is used:

@example
(perform-operation
 (choice-operation
  (wrap-operation (get-operation ch) (lambda (x) (cons 'msg x)))
  (wrap-operation (sleep-operation 1) (lambda _ 'timeout))))
@end example

This code will either return @code{(msg . x)} where @code{x} is the
received message; but if more than one second passes without a message
it returns @code{timeout}.

The object returned from @code{choice-operation} can be returned from
a procedure, stored in a data structure, sent over a channel, etc.
@end deffn

@deffn Procedure make-cvar
Make a new @dfn{condition variable} (in Concurrent ML's terminology).
These allow a program to wait for a condition to be signalled. See the
procedures below.
@end deffn

@deffn Procedure cvar? obj
True if @var{obj} is a condition variable.
@end deffn

@deffn Procedure signal-cvar! cvar
Signal the condition variable @var{cvar}, unblocking any fibers that
are waiting for it.
@end deffn

@deffn Procedure wait cvar
Wait for the condition variable @var{cvar} to be signalled, blocking
until it is.
@end deffn

@deffn Procedure wait-operation cvar
Return an operation that represents waiting for the condition variable
@var{cvar} to be signalled.
@end deffn

@deffn Procedure yield-current-task
Yield the current task and and let another fiber run. This is
generally not needed in I/O-bound programs, but is provided to let
CPU-bound programs cooperate and voluntarily let other fibers run.
@end deffn

@deffn Procedure exit-current-task
Stops the running fiber.
@end deffn

@deffn Procedure run-fibers init-thunk
Provided for compatibility with Guile. It runs the procedure
@var{init-thunk} in the fibers scheduler. This procedure can return
earlier in Loko than in does in Guile. Guile provides it because
fibers are not an integrated feature in its runtime, so it needs
an entry point for when to start and stop the fibers facility.
@end deffn

@c Local Variables:
@c TeX-master: "loko.texi"
@c End:
